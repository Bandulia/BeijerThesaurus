// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Thesaurus.Core.Data;

#nullable disable

namespace Thesaurus.core.Migrations
{
    [DbContext(typeof(ThesaurusDbContext))]
    partial class ThesaurusDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Thesaurus.core.Entities.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Text")
                        .IsUnique();

                    b.ToTable("Words");
                });

            modelBuilder.Entity("Thesaurus.core.Entities.WordSynonym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SynonymId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SynonymId");

                    b.HasIndex("WordId");

                    b.ToTable("WordSynonyms");
                });

            modelBuilder.Entity("Thesaurus.core.Entities.WordSynonym", b =>
                {
                    b.HasOne("Thesaurus.core.Entities.Word", "Synonym")
                        .WithMany()
                        .HasForeignKey("SynonymId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Thesaurus.core.Entities.Word", "Word")
                        .WithMany("Synonyms")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Synonym");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Thesaurus.core.Entities.Word", b =>
                {
                    b.Navigation("Synonyms");
                });
#pragma warning restore 612, 618
        }
    }
}
